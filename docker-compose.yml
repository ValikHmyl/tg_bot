version: '3.1'
services:
  postgres: 
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=root      
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=khmyl_app
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - tgbot-network
  bot-app:
    image: 'bot-app:latest'
    build:
      context: .
    container_name: bot-app     
    depends_on:
      - postgres
      - kafka
      - zookeeper
    environment:
      - JDBC_DATABASE_URL=jdbc:postgresql://postgres:5432/khmyl_app
      - JDBC_DATABASE_USERNAME=root
      - JDBC_DATABASE_PASSWORD=root
      - BOT_TOKEN=${BOT_TOKEN}
    networks:
      - tgbot-network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    container_name: zookeeper
    networks:
      - tgbot-network
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    container_name: kafka
    networks:
      - tgbot-network
volumes:
  db:
networks:
  tgbot-network:
    driver: bridge